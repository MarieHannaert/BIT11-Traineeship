import os

CONDITIONS = ["1", "2"]

# Define directories
REFDIR = os.getcwd()
sample_dir = REFDIR+"/data/sampels/"

sample_names = []
sample_list = os.listdir(sample_dir)
for i in range(len(sample_list)):
    sample = sample_list[i]
    if sample.endswith("_1.fq.gz"):
        samples = sample.split("_1.fq")[0]
        sample_names.append(samples)
        print(sample_names)

rule all:
    input:
        expand("results/00_fastqc/{names}_{con}_fastqc/", names=sample_names, con = CONDITIONS),
        "results/01_multiqc/multiqc_report.html",
        expand("results/02_kraken2/{names}_{con}_kraken2.report", names=sample_names, con = CONDITIONS),
        expand("results/03_krona/{names}_{con}_krona.html", names=sample_names, con = CONDITIONS),
        expand("results/04_fastp/{names}_1.fq.gz", names=sample_names),
        expand("results/04_fastp/{names}_2.fq.gz", names=sample_names),
        expand("results/04_fastp/{names}_fastp.html", names=sample_names),
        expand("results/04_fastp/{names}_fastp.json", names=sample_names),
        expand("results/05_shovill/{names}/", names=sample_names),
        expand("results/assemblies/{names}.fna", names=sample_names),
        "results/06_skani/skani_results_file.txt"

rule fastqc: 
    input:
        "data/sampels/{names}_{con}.fq.gz"
    output:
        result = directory("results/00_fastqc/{names}_{con}_fastqc/")
    log:
        "logs/fastqc_{names}_{con}.log"
    params:
        extra="-t 32"
    shell:
        """
        fastqc {params.extra} {input} --extract -o results/00_fastqc/ 2>> {log}
        """

rule multiqc:
    input:
        expand("results/00_fastqc/{names}_{con}_fastqc/", names=sample_names, con = CONDITIONS),
        "results/00_fastqc/"
    output:
        "results/01_multiqc/multiqc_report.html",
        result = directory("results/01_multiqc/")  
    log:
        "logs/multiqc.log"
    conda:
        "envs/multiqc.yaml"
    shell:
        """
        multiqc {input[1]} -o {output.result} 2>> {log}
        """

rule Kraken2:
    input:
        "data/sampels/{names}_{con}.fq.gz"
    output:
        "results/02_kraken2/{names}_{con}_kraken2.report"
    params:
        threads=16
    log:
        "logs/Kraken2_{names}_{con}.log"
    shell:
        """
        kraken2 --gzip-compressed {input} --db /var/db/kraken2/Standard --report {output} --threads {params.threads} --quick --memory-mapping 2>> {log}
        """

rule Krona:
    input:
        "results/02_kraken2/{names}_{con}_kraken2.report"
    output:
        "results/03_krona/{names}_{con}_krona.html"
    params:
        extra="-t 5 -m 3"
    log:
        "logs/Krona_{names}_{con}.log"
    conda:
        "envs/krona.yaml"
    shell:
        """
        ktImportTaxonomy {params.extra} -o {output} {input} 2>> {log}
        """

rule Fastp:
    input:
        first = "data/sampels/{names}_1.fq.gz",
        second = "data/sampels/{names}_2.fq.gz"
    output:
        first = "results/04_fastp/{names}_1.fq.gz",
        second = "results/04_fastp/{names}_2.fq.gz",
        html = "results/04_fastp/{names}_fastp.html",
        json = "results/04_fastp/{names}_fastp.json"
    params:
        extra="-w 32"
    log:
        "logs/fastp_{names}.log"
    shell:
        """
        fastp {params.extra} -i {input.first} -I {input.second} -o {output.first} -O {output.second} -h {output.html} -j {output.json} --detect_adapter_for_pe 2>> {log}
        """

rule shovill:
    input:
        first = "results/04_fastp/{names}_1.fq.gz",
        second = "results/04_fastp/{names}_2.fq.gz"
    output: 
        result = directory("results/05_shovill/{names}/")
    params:
        extra = "--cpus 16 --ram 16 --minlen 500 --trim"
    log:
        "logs/shovill_{names}.log"
    conda:
        "envs/shovill.yaml"
    shell:
        """
        shovill --R1 {input.first} --R2 {input.second} {params.extra} -outdir {output.result} 2>> {log}
        """

rule contigs:
    input:
        "results/05_shovill/{names}/contigs.fa"
    output:
        "results/assemblies/{names}.fna"
    shell:
        """
        cp {input} {output}
        """

rule skani:
    input:
        "results/assemblies"
    output:
        result = "results/06_skani/skani_results_file.txt"
    params:
        extra = "-t 24 -n 1"
    log:
        "logs/skani.log"
    conda:
       "envs/skani.yaml"
    shell:
        """
        skani search {input}/*.fna -d /home/genomics/bioinf_databases/skani/skani-gtdb-r214-sketch-v0.2 -o {output} {params.extra} 2>> {log}
        """
