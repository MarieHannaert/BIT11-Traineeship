import os

CONDITIONS = ["1", "2"]
DIRS = ["00_fastqc","01_multiqc", "02_kraken2","03_krona"]

# Define directories
REFDIR = "/home/genomics/mhannaert/snakemake/Illuminapipeline/"
sample_dir = REFDIR+"data/sampels/"
result_dir = REFDIR+"results/"
os.chdir(REFDIR)

print(os.getcwd())
sample_names = []
sample_list = os.listdir(sample_dir)
for i in range(len(sample_list)):
    sample = sample_list[i]
    if sample.endswith("_1.fq.gz"):
        samples = sample.split("_1.fq")[0]
        sample_names.append(samples)
        print(sample_names)

for dir in DIRS:
    if os.path.isdir("results/"+dir) == False:
        os.mkdir("results/"+dir)

rule all:
    input:
        expand("results/00_fastqc/{names}_{con}_fastqc/", names=sample_names, con = CONDITIONS),
        "results/01_multiqc/multiqc_report.html",
        expand("results/02_kraken2/{names}_{con}_kraken2.report", names=sample_names, con = CONDITIONS),
        expand("results/03_krona/{names}_{con}_krona.html", names=sample_names, con = CONDITIONS)


rule fastqc: 
    input:
        "data/sampels/{names}_{con}.fq.gz"
    output:
        result = directory("results/00_fastqc/{names}_{con}_fastqc/")
    log:
        "logs/fastqc_{names}_{con}.log"
    params:
        extra="-t 32"
    shell:
        """
        fastqc {params.extra} {input} --extract -o results/00_fastqc/ 2>> {log}
        """

rule multiqc:
    input:
        expand("results/00_fastqc/{names}_{con}_fastqc/", names=sample_names, con = CONDITIONS),
        "results/00_fastqc/"
    output:
        "results/01_multiqc/multiqc_report.html",
        result = directory("results/01_multiqc/")  
    log:
        "logs/multiqc.log"
    conda:
        "envs/multiqc.yml"
    shell:
        """
        multiqc {input[1]} -o {output.result} 2>> {log}
        """

rule Kraken2:
    input:
        "data/sampels/{names}_{con}.fq.gz"
    output:
        "results/02_kraken2/{names}_{con}_kraken2.report"
    params:
        threads=16
    log:
        "logs/Kraken2_{names}_{con}.log"
    shell:
        """
        kraken2 --gzip-compressed {input} --db /var/db/kraken2/Standard --report {output} --threads {params.threads} --quick --memory-mapping 2>> {log}
        """

rule Krona:
    input:
        "results/02_kraken2/{names}_{con}_kraken2.report"
    output:
        "results/03_krona/{names}_{con}_krona.html"
    params:
        extra="-t 5 -m 3"
    log:
        "logs/Krona_{names}_{con}.log"
    conda:
        "envs/krona.yml"
    shell:
        """
        ktImportTaxonomy {params.extra} -o {output} {input} 2>> {log}
        """
